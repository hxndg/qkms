// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: qkms.proto

package qkms_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QkmsClient is the client API for Qkms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QkmsClient interface {
	ReadAccessKey(ctx context.Context, in *ReadAccessKeyRequest, opts ...grpc.CallOption) (*ReadAccessKeyReply, error)
	GenerateAccessKey(ctx context.Context, in *GenerateAccessKeyReply, opts ...grpc.CallOption) (*GenerateAccessKeyReply, error)
	CreateAccessKey(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*CreateAccessKeyRequest, error)
	UpdateAccessKey(ctx context.Context, in *UpdateAccessKeyRequest, opts ...grpc.CallOption) (*UpdateAccessKeyReply, error)
	RotateAccessKey(ctx context.Context, in *RotateAccessKeyRequest, opts ...grpc.CallOption) (*RotateAccessKeyReply, error)
	GrantAccessKeyAuthorization(ctx context.Context, in *GrantAccessKeyAuthorizationRequest, opts ...grpc.CallOption) (*GrantAccessKeyAuthorizationReply, error)
}

type qkmsClient struct {
	cc grpc.ClientConnInterface
}

func NewQkmsClient(cc grpc.ClientConnInterface) QkmsClient {
	return &qkmsClient{cc}
}

func (c *qkmsClient) ReadAccessKey(ctx context.Context, in *ReadAccessKeyRequest, opts ...grpc.CallOption) (*ReadAccessKeyReply, error) {
	out := new(ReadAccessKeyReply)
	err := c.cc.Invoke(ctx, "/qkms_proto.qkms/ReadAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qkmsClient) GenerateAccessKey(ctx context.Context, in *GenerateAccessKeyReply, opts ...grpc.CallOption) (*GenerateAccessKeyReply, error) {
	out := new(GenerateAccessKeyReply)
	err := c.cc.Invoke(ctx, "/qkms_proto.qkms/GenerateAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qkmsClient) CreateAccessKey(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*CreateAccessKeyRequest, error) {
	out := new(CreateAccessKeyRequest)
	err := c.cc.Invoke(ctx, "/qkms_proto.qkms/CreateAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qkmsClient) UpdateAccessKey(ctx context.Context, in *UpdateAccessKeyRequest, opts ...grpc.CallOption) (*UpdateAccessKeyReply, error) {
	out := new(UpdateAccessKeyReply)
	err := c.cc.Invoke(ctx, "/qkms_proto.qkms/UpdateAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qkmsClient) RotateAccessKey(ctx context.Context, in *RotateAccessKeyRequest, opts ...grpc.CallOption) (*RotateAccessKeyReply, error) {
	out := new(RotateAccessKeyReply)
	err := c.cc.Invoke(ctx, "/qkms_proto.qkms/RotateAccessKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qkmsClient) GrantAccessKeyAuthorization(ctx context.Context, in *GrantAccessKeyAuthorizationRequest, opts ...grpc.CallOption) (*GrantAccessKeyAuthorizationReply, error) {
	out := new(GrantAccessKeyAuthorizationReply)
	err := c.cc.Invoke(ctx, "/qkms_proto.qkms/GrantAccessKeyAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QkmsServer is the server API for Qkms service.
// All implementations must embed UnimplementedQkmsServer
// for forward compatibility
type QkmsServer interface {
	ReadAccessKey(context.Context, *ReadAccessKeyRequest) (*ReadAccessKeyReply, error)
	GenerateAccessKey(context.Context, *GenerateAccessKeyReply) (*GenerateAccessKeyReply, error)
	CreateAccessKey(context.Context, *CreateAccessKeyRequest) (*CreateAccessKeyRequest, error)
	UpdateAccessKey(context.Context, *UpdateAccessKeyRequest) (*UpdateAccessKeyReply, error)
	RotateAccessKey(context.Context, *RotateAccessKeyRequest) (*RotateAccessKeyReply, error)
	GrantAccessKeyAuthorization(context.Context, *GrantAccessKeyAuthorizationRequest) (*GrantAccessKeyAuthorizationReply, error)
	mustEmbedUnimplementedQkmsServer()
}

// UnimplementedQkmsServer must be embedded to have forward compatible implementations.
type UnimplementedQkmsServer struct {
}

func (UnimplementedQkmsServer) ReadAccessKey(context.Context, *ReadAccessKeyRequest) (*ReadAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAccessKey not implemented")
}
func (UnimplementedQkmsServer) GenerateAccessKey(context.Context, *GenerateAccessKeyReply) (*GenerateAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessKey not implemented")
}
func (UnimplementedQkmsServer) CreateAccessKey(context.Context, *CreateAccessKeyRequest) (*CreateAccessKeyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessKey not implemented")
}
func (UnimplementedQkmsServer) UpdateAccessKey(context.Context, *UpdateAccessKeyRequest) (*UpdateAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessKey not implemented")
}
func (UnimplementedQkmsServer) RotateAccessKey(context.Context, *RotateAccessKeyRequest) (*RotateAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateAccessKey not implemented")
}
func (UnimplementedQkmsServer) GrantAccessKeyAuthorization(context.Context, *GrantAccessKeyAuthorizationRequest) (*GrantAccessKeyAuthorizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccessKeyAuthorization not implemented")
}
func (UnimplementedQkmsServer) mustEmbedUnimplementedQkmsServer() {}

// UnsafeQkmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QkmsServer will
// result in compilation errors.
type UnsafeQkmsServer interface {
	mustEmbedUnimplementedQkmsServer()
}

func RegisterQkmsServer(s grpc.ServiceRegistrar, srv QkmsServer) {
	s.RegisterService(&Qkms_ServiceDesc, srv)
}

func _Qkms_ReadAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QkmsServer).ReadAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qkms_proto.qkms/ReadAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QkmsServer).ReadAccessKey(ctx, req.(*ReadAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qkms_GenerateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAccessKeyReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QkmsServer).GenerateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qkms_proto.qkms/GenerateAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QkmsServer).GenerateAccessKey(ctx, req.(*GenerateAccessKeyReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qkms_CreateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QkmsServer).CreateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qkms_proto.qkms/CreateAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QkmsServer).CreateAccessKey(ctx, req.(*CreateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qkms_UpdateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QkmsServer).UpdateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qkms_proto.qkms/UpdateAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QkmsServer).UpdateAccessKey(ctx, req.(*UpdateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qkms_RotateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QkmsServer).RotateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qkms_proto.qkms/RotateAccessKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QkmsServer).RotateAccessKey(ctx, req.(*RotateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qkms_GrantAccessKeyAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAccessKeyAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QkmsServer).GrantAccessKeyAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qkms_proto.qkms/GrantAccessKeyAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QkmsServer).GrantAccessKeyAuthorization(ctx, req.(*GrantAccessKeyAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Qkms_ServiceDesc is the grpc.ServiceDesc for Qkms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qkms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qkms_proto.qkms",
	HandlerType: (*QkmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAccessKey",
			Handler:    _Qkms_ReadAccessKey_Handler,
		},
		{
			MethodName: "GenerateAccessKey",
			Handler:    _Qkms_GenerateAccessKey_Handler,
		},
		{
			MethodName: "CreateAccessKey",
			Handler:    _Qkms_CreateAccessKey_Handler,
		},
		{
			MethodName: "UpdateAccessKey",
			Handler:    _Qkms_UpdateAccessKey_Handler,
		},
		{
			MethodName: "RotateAccessKey",
			Handler:    _Qkms_RotateAccessKey_Handler,
		},
		{
			MethodName: "GrantAccessKeyAuthorization",
			Handler:    _Qkms_GrantAccessKeyAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qkms.proto",
}
