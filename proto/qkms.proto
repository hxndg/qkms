// 以下的所有请求，写权限都是只有该密钥的拥有者，也就是grpc签名的appkey和密钥的appkey一致的才能拥有
// 读权限都是看权限授予表里面有没有授予对应appkey相应密钥的权限

syntax = "proto3";

option go_package="./;qkms_proto";

package qkms_proto;

message ReadAccessKeyRequest {
    string NameSpace = 1;
    string Name = 2;
    string Environment = 3;
}

message ReadAccessKeyReply {
    uint64 ErrorCode = 1;
    string NameSpace = 2;
    string Name = 3;
    string AKPlaintext = 4;
    string KeyType = 5;
    string Environment = 6;
    uint64 Version = 7;
}

message GenerateAccessKeyRequest {
    string NameSpace = 1;
    string Name = 2;
    string KeyType = 3;
    string Environment = 4;
}

message GenerateAccessKeyReply {
    uint64 ErrorCode = 1;
}

// 首先key_type需要和数据库里面的key_type一致。
// 其次，这个是自动rotate，如果类型的key_type不是opquae那么会出错
message RotateAccessKeyRequest {
    string NameSpace = 1;
    string Name = 2;
    string KeyType = 3;
    string Environment = 4;
}

message RotateAccessKeyReply {
    uint64 ErrorCode = 1;
}

message CreateAccessKeyRequest {
    string NameSpace = 1;
    string Name = 2;
    string AKPlaintext = 3;
    string KeyType = 4;
    string Environment = 5;
}

message CreateAccessKeyReply {
    uint64 ErrorCode = 1;
}

// 首先key_type需要和数据库里面的key_type一致。
message UpdateAccessKeyRequest {
    string NameSpace = 1;
    string Name = 2;
    string KeyType = 3;
    string AKPlaintext = 4;
    string Environment = 5;
    uint64 Version = 6;
}

message UpdateAccessKeyReply {
    uint64 ErrorCode = 1;
}

message GrantAccessKeyAuthorizationRequest {
    string NameSpace = 1;
    string Name = 2;
    string Environment = 3;
    string Appkey = 4;
    string Behavior = 5;
}

message GrantAccessKeyAuthorizationReply {
    uint64 ErrorCode = 1;
}

message CreateKeyEncryptionKeyRequest {
    string NameSpace = 1;
    string Environment = 2;
}

message CreateKeyEncryptionKeyReply {
    uint64 ErrorCode = 1;
}

message CreateRoleRequest {
    string Name =1;
}

message CreateRoleReply {
    uint64 ErrorCode = 1;
}

message GrantNameSpaceForRoleRequest {
    string Role = 1;
    repeated string NameSpaces = 2;
    string Behavior = 3;
}

message GrantNameSpaceForRoleReply {
    uint64 ErrorCode = 1;
}

message GrantRoleForUserRequest {
    string User = 1;
    string Role = 2;
}

message GrantRoleForUserReply {
    uint64 ErrorCode = 1;
}

message GetAccessKeyIndexsRequest {
    string NameSpace = 1;
}

message GetAccessKeyIndexsReply {
    message AccessKey {
        string NameSpace = 1;
        string Name = 2;
        string Environment = 3;
    }
    repeated AccessKey AccessKeys = 1;
    uint64 ErrorCode = 2;
}

message GenerateCredentialRequest {
    string Name = 1;
}

message GenerateCredentialReply {
    uint64 ErrorCode = 1;
    string AppKey = 2;
    string Cert = 3;
    string key = 4;
}

message UpdateCredentialRequest {
}

message UpdateCredentialReply {
    uint64 ErrorCode = 1;
    string Cert = 2;
    string key = 3;
}

service qkms {
    /* for all users */
    rpc ReadAccessKey(ReadAccessKeyRequest) returns (ReadAccessKeyReply) {}
    rpc GenerateAccessKey(GenerateAccessKeyReply) returns (GenerateAccessKeyReply) {}
    rpc CreateAccessKey(CreateAccessKeyRequest) returns (CreateAccessKeyReply) {}
    rpc CreateKeyEncryptionKey(CreateKeyEncryptionKeyRequest) returns (CreateKeyEncryptionKeyReply) {}
    rpc UpdateAccessKey(UpdateAccessKeyRequest) returns (UpdateAccessKeyReply) {}
    rpc RotateAccessKey(RotateAccessKeyRequest) returns (RotateAccessKeyReply) {}
    rpc GrantAccessKeyAuthorization(GrantAccessKeyAuthorizationRequest) returns (GrantAccessKeyAuthorizationReply) {}

    rpc UpdateCredential(UpdateCredentialRequest) returns (UpdateCredentialReply) {}

    rpc GetAccessKeyIndexs(GetAccessKeyIndexsRequest) returns (GetAccessKeyIndexsReply) {}

    /* only for roots */
    rpc CreateRole(CreateRoleRequest) returns (CreateRoleReply) {}
    rpc GrantNameSpaceForRole(GrantNameSpaceForRoleRequest) returns (GrantNameSpaceForRoleReply) {}
    rpc GrantRoleForUser(GrantRoleForUserRequest) returns (GrantRoleForUserReply) {}

    rpc GenerateCredential(GenerateCredentialRequest) returns (GenerateCredentialReply) {}
}
